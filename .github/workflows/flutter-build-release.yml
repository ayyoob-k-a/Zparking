name: Flutter Build and Release

on:
  push:
    branches: [ 'main' ]
  pull_request:
    branches: [ 'main' ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: 'Release notes'
        required: false
        type: string

permissions:
  contents: read
  actions: write
  security-events: write

jobs:
  version:
    name: Version Bump
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
    outputs:
      new_version: ${{ steps.version_bump.outputs.new_version }}
      build_number: ${{ steps.version_bump.outputs.build_number }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.8'
          channel: 'stable'
          cache: true

      - name: Bump version
        id: version_bump
        run: |
          CURRENT=$(grep '^version:' pubspec.yaml | awk '{print $2}')
          CURRENT_VER=${CURRENT%%+*}
          CURRENT_BUILD=${CURRENT##*+}
          MAJOR=$(echo $CURRENT_VER | cut -d. -f1)
          MINOR=$(echo $CURRENT_VER | cut -d. -f2)
          PATCH=$(echo $CURRENT_VER | cut -d. -f3)

          if [[ "${{ github.event.inputs.version_type }}" == "major" ]]; then
            MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0
          elif [[ "${{ github.event.inputs.version_type }}" == "minor" ]]; then
            MINOR=$((MINOR + 1)); PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW=$MAJOR.$MINOR.$PATCH
          NEW_BUILD=$((CURRENT_BUILD + 1))
          sed -i "s/^version: .*/version: $NEW+$NEW_BUILD/" pubspec.yaml

          echo "new_version=$NEW" >> $GITHUB_OUTPUT
          echo "build_number=$NEW_BUILD" >> $GITHUB_OUTPUT

          git config user.name 'GitHub Actions'
          git config user.email 'actions@github.com'
          git add pubspec.yaml
          git commit -m "Bump to $NEW+$NEW_BUILD [skip ci]" || echo "No changes"
          git push || { echo "Git push failed"; exit 1; }

  build_android:
    name: Build Android APK
    runs-on: ubuntu-latest
    needs: version

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.8'
          channel: 'stable'
          cache: true

      - name: Accept Android SDK Licenses
        run: yes | flutter doctor --android-licenses

      - name: Cache pub packages
        uses: actions/cache@v3
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Install dependencies
        run: flutter pub get

      - name: Lint & analyze
        run: |
          flutter format --set-exit-if-changed .
          flutter analyze

      - name: Build APK (verbose)
        run: flutter build apk --release -v

      - name: Extract app version
        id: version_info
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | awk '{print $2}')
          echo "app_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Rename APK
        run: |
          VERSION=${{ steps.version_info.outputs.app_version }}
          SRC="build/app/outputs/flutter-apk/app-release.apk"
          DST="build/app/outputs/flutter-apk/Zparking-$VERSION.apk"
          if [ -f "$SRC" ]; then mv "$SRC" "$DST"; else echo "APK missing"; exit 1; fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Zparking-apk
          path: build/app/outputs/flutter-apk/Zparking-${{ steps.version_info.outputs.app_version }}.apk
          retention-days: 7

      - name: Create GitHub release
        if: github.event_name == 'workflow_dispatch'
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.version_info.outputs.app_version }}
          release_name: "Release ${{ steps.version_info.outputs.app_version }}"
          body: |
            # Zparking Release v${{ steps.version_info.outputs.app_version }}

            ${{ github.event.inputs.release_notes }}
          draft: false
          prerelease: false

      - name: Upload to GitHub Release
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/Zparking-${{ steps.version_info.outputs.app_version }}.apk
          asset_name: Zparking-${{ steps.version_info.outputs.app_version }}.apk
          asset_content_type: application/vnd.android.package-archive
