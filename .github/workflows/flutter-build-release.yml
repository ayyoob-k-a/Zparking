name: Flutter Build and Release

on:
  push:
    branches: [ 'main' ]
  pull_request:
    branches: [ 'main' ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: 'Release notes'
        required: false
        type: string

jobs:
  version:
    name: Version Bump
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev-gokul-v5'
    outputs:
      new_version: ${{ steps.version_bump.outputs.new_version }}
      build_number: ${{ steps.version_bump.outputs.build_number }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.8'
          channel: 'stable'
          cache: true

      - name: Version Bump
        id: version_bump
        run: |
          CURRENT_VERSION=$(grep 'version:' pubspec.yaml | awk -F' ' '{print $2}' | awk -F'+' '{print $1}')
          CURRENT_BUILD=$(grep 'version:' pubspec.yaml | awk -F'+' '{print $2}')

          MAJOR=$(echo $CURRENT_VERSION | awk -F'.' '{print $1}')
          MINOR=$(echo $CURRENT_VERSION | awk -F'.' '{print $2}')
          PATCH=$(echo $CURRENT_VERSION | awk -F'.' '{print $3}')

          if [[ "${{ github.event.inputs.version_type }}" == "major" ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "${{ github.event.inputs.version_type }}" == "minor" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_BUILD=$((CURRENT_BUILD + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"

          sed -i "s/version: .*/version: $NEW_VERSION+$NEW_BUILD/" pubspec.yaml

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$NEW_BUILD" >> $GITHUB_OUTPUT

          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add pubspec.yaml
          git commit -m "Bump version to $NEW_VERSION+$NEW_BUILD [skip ci]"
          git push

  build_android:
    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.8'
          channel: 'stable'
          cache: true

      - name: Clean and get dependencies
        run: |
          flutter clean
          rm -f pubspec.lock
          flutter pub get -v

      - name: Build APK
        run: flutter build apk --release

      - name: Extract version info
        id: version_info
        run: |
          VERSION=$(grep 'version:' pubspec.yaml | awk -F' ' '{print $2}')
          echo "app_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Rename APK
        run: |
          VERSION=${{ steps.version_info.outputs.app_version }}
          mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/Zparking-$VERSION.apk

      - name: Upload APK to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Zparking-apk
          path: build/app/outputs/flutter-apk/Zparking-${{ steps.version_info.outputs.app_version }}.apk
          retention-days: 7

      - name: Create Release
        if: github.event_name == 'workflow_dispatch' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev-gokul-v5')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version_info.outputs.app_version }}
          release_name: Release v${{ steps.version_info.outputs.app_version }}
          draft: false
          prerelease: false
          body: |
            # Zparking App Release v${{ steps.version_info.outputs.app_version }}

            ${{ github.event.inputs.release_notes }}

            ## Installation
            Download and install the APK on your Android device.

      - name: Upload Release Asset
        if: github.event_name == 'workflow_dispatch' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev-gokul-v5')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/Zparking-${{ steps.version_info.outputs.app_version }}.apk
          asset_name: Zparking-${{ steps.version_info.outputs.app_version }}.apk
          asset_content_type: application/vnd.android.package-archive
